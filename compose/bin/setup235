#!/usr/bin/env bash
set -o errexit

RED='\033[0;31m'
NC='\033[0m' # No Color
STEP=1

MEM=$(docker info | grep "Total Memory" | cut -d':' -f2 | xargs | sed s/GiB//)
# Docker reports RAM 0.2 less than what it is actually set to
(( $(echo "$MEM < 5.7" | bc -l) )) && echo -e "${RED}There must be at least 6GB of RAM allocated to Docker to continue." && exit

Help()
{
   # Display Help
   echo
   echo "Fully setup and install Magento 2.3.5-p2 from current source"
   echo
   echo "Syntax: [-d|e|help]"
   echo "options:"
   echo "-d      Sets the domain name."
   echo "-e      Sets the email address for order confirmations."
   echo "-r      Sets the repository."
   echo "-b      Sets the repository branch."
   echo "-h      Print this help and exit."
   echo
}

while getopts 'd:e:r:b:h' flag; do
  case "${flag}" in
        d)
			DOMAIN="${OPTARG}";;
		e)
			EMAIL="${OPTARG}";;
		r)
			REPOSITORY="${OPTARG}";;
		b)
			BRANCH="${OPTARG}";;
		h|*)
			Help
			exit 1;;
    esac
done
echo
[ -z "${DOMAIN}" ] && echo -e "${RED}Please specify a domain name ${NC}(ex. -d magento.test)" && Help && exit
echo "Domain: $DOMAIN"
[ -z "${EMAIL}" ] && echo -e "${RED}Please specify an email address ${NC}(ex. -e none@example.com)" && Help && exit
echo "Email: $EMAIL"
[ -z "${REPOSITORY}" ] && echo -e "${RED}Please specify a repository ${NC}(ex. -r https://bitbucket.org/company/magento.git)" && Help && exit
echo "Repository: $REPOSITORY"
[ -z "${BRANCH}" ] && echo -e "${RED}Please specify a branch ${NC}(ex. -b feature/commit-files)" && Help && exit
echo "Branch: $BRANCH"

if [ ! -w "/etc/hosts" ]
then
    echo -e "${RED}ERROR: Your system password is needed to add an entry to /etc/hosts... Change permissions and run setup again."
	exit
fi

# Check if env.php, auth.json, and deploy.php are available
if [ ! -e env.php ]; then
    echo -e "${RED}env.php file does not exist.${NC}"
	exit
fi
if [ ! -e auth.json ]; then
    echo -e "${RED}auth.json file does not exist.${NC}"
	exit
fi
if [ ! -e deploy.php ]; then
    echo -e "${RED}deploy.php file does not exist.${NC}"
	exit
fi
if [ ! -e db.sql ]; then
    echo -e "${RED}db.sql database file does not exist.${NC}"
	exit
fi


cp -f compose235.yaml compose.yaml
cp -f compose235.healthcheck.yaml compose.healthcheck.yaml

# Start some containers, copy files to them and then restart the containers:
echo -e "${RED}Step ${STEP}: ${NC} Start some containers..."
bin/start --no-dev
bin/root composer selfupdate --2
((STEP++))

echo -e "${RED}Step ${STEP}: ${NC} Download latest repository..."
git clone --single-branch --branch "$BRANCH" "$REPOSITORY" src
cp env.php src/app/etc/env.php
cp auth.json src/auth.json
cp deploy.php src/deploy.php
((STEP++))

echo -e "${RED}Step ${STEP}: ${NC} Copy src folder to container..."
bin/copytocontainer --all ## Initial copy will take a few minutes...
((STEP++))

# If your vendor directory was empty, populate it with:
echo -e "${RED}Step ${STEP}: ${NC} Run composer install..."
bin/composer install
((STEP++))

# Import existing database:
echo -e "${RED}Step ${STEP}: ${NC} Import database backup..."
bin/mysql < db.sql
((STEP++))

# Create a DNS host entry and setup Magento base url
echo -e "${RED}Step ${STEP}: ${NC} Create a DNS host entry and setup Magento base url..."
echo "127.0.0.1 ::1 $DOMAIN" >> /etc/hosts
bin/clinotty bin/magento config:set web/secure/base_url https://"$DOMAIN"/
bin/clinotty bin/magento config:set web/unsecure/base_url https://"$DOMAIN"/
bin/clinotty bin/magento config:set sales_email/order/copy_to "$EMAIL"
bin/clinotty bin/magento config:set sales_email/order_comment/copy_to "$EMAIL"
bin/clinotty bin/magento config:set sales_email/invoice/copy_to "$EMAIL"
bin/clinotty bin/magento config:set sales_email/invoice_comment/copy_to "$EMAIL"
bin/clinotty bin/magento config:set sales_email/shipment_comment/copy_to "$EMAIL"
bin/clinotty bin/magento config:set sales_email/creditmemo/copy_to "$EMAIL"
bin/clinotty bin/magento config:set sales_email/creditmemo_comment/copy_to "$EMAIL"
((STEP++))

echo "${RED}Step ${STEP}: ${NC} Generating SSL certificate..."
bin/setup-ssl "$DOMAIN"
((STEP++))

echo -e "${RED}Step ${STEP}: ${NC} Run deployer:refresh..."
bin/cli dep deploy:magento
((STEP++))

echo -e "${RED}Step ${STEP}: ${NC} Restart services..."
bin/restart
((STEP++))
